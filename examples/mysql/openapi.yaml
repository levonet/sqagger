---
openapi: "3.0.1"
info:
  title: Demo
  version: "0.0.1"

paths:
  /pet:
    post:
      summary: Add a new pet to the store
      description: |
        INSERT INTO pet (name, status) VALUES (:name, :status)
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetData'
        required: true
      responses:
        200:
          description: OK
    get:
      summary: List pets by status
      description: |
        A custom-wrapped query

        ```sql
        SELECT
            pet_id as petId,
            name,
            status
        FROM pet
        WHERE status = :status
        ```
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Status'
      responses:
        200:
          description: OK
  /pet/{petId}:
    get:
      summary: Find pet by ID
      description: |
        SELECT
            pet_id as petId,
            name,
            status
        FROM pet
        WHERE pet_id = :petId
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
    put:
      summary: Updates a pet in the store with form data
      description: |
        UPDATE pet SET name=:name, status=:status WHERE pet_id=:petId
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        schema:
          type: integer
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetData'
        required: true
      responses:
        200:
          description: OK
    delete:
      summary: Update an existing pet
      description: |
        DELETE FROM pet WHERE pet_id=:petId
      parameters:
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK

components:
  schemas:
    Status:
      type: string
      description: pet status in the store
      enum:
      - available
      - pending
      - sold
    PetData:
      type: object
      properties:
        name:
          type: string
          example: doggie
        status:
          $ref: '#/components/schemas/Status'
